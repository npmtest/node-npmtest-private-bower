{"/home/travis/build/npmtest/node-npmtest-private-bower/test.js":"/* istanbul instrument in package npmtest_private_bower */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-private-bower/lib.npmtest_private_bower.js":"/* istanbul instrument in package npmtest_private_bower */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_private_bower = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_private_bower = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-private-bower/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-private-bower && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_private_bower */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_private_bower\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_private_bower.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_private_bower.rollup.js'] =\n            local.assetsDict['/assets.npmtest_private_bower.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_private_bower.__dirname + '/lib.npmtest_private_bower.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/bin/private-bower":"#!/usr/bin/env node\n\nrequire('../lib/main')().start();","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/main.js":"var path = require('path');\nvar Express = require('express');\nvar logger = require('./infrastructure/logger');\nvar argv = require('optimist').argv;\nvar bodyParser = require('body-parser');\n\nvar utils = require('./infrastructure/utils');\nvar application = require('./application');\nvar configurationManager = require('./infrastructure/configurationManager');\nvar version = require('../package.json').version;\n\nmodule.exports = function Main() {\n    var _config;\n    \n    function _start(configPath) {\n        if(argv.h || argv.help) {\n            logger.logHelp();\n\n            utils.process.exit();\n        }\n        if (argv.version) {\n            console.log(version);\n            utils.process.exit();\n        }\n\n        _handleErrors();\n        _handleShutDown();\n\n        var serverApp = Express();\n        \n        var defaultConfigPath = path.join(utils.dirname, '../bower.conf.json');\n        configurationManager.loadConfiguration(configPath || argv.config || defaultConfigPath);\n        \n        _config = configurationManager.config;\n        \n        application.setup(serverApp, Express.static, _config.server.siteBaseURL);\n        \n        _initializePackageStores();\n        _initializeService();\n\n        logger.log('private-bower server started');\n    }\n\n    function _initializePackageStores() {\n        application.startPrivatePackageStore(_config.registryFile);\n\n        if(!_config.public.disabled) {\n            application.startPublicPackageStore();\n        }\n\n        if(_config.repositoryCache && _config.repositoryCache.enabled) {\n            application.startPublicRepositoryCache(_config.repoCacheOptions);\n        }\n    }\n\n    function _initializeService() {\n        application.addMiddleware(bodyParser.urlencoded({\n            extended: true\n        }));\n        application.addMiddleware(bodyParser.json());\n\n        application.serveStatic(path.join(utils.dirname, '../site'));\n\n        application.loadControllers(path.join(utils.dirname, 'api/controllers'));\n\n        if (_config.server.siteBaseURL) {\n            application.addMiddlewareWithMount('/', function redirectToBaseUrl(req, res, next) {\n                res.redirect(_config.server.siteBaseURL);\n            });\n        }\n\n        application.addMiddleware(function errorHandler(err, req, res, next) {\n            logger.error(err);\n            logger.error(err.stack);\n\n            res.status(500).send('Something wen\\'t wrong :(');\n        });\n\n        application.listen(_config.server.port, _config.server.hostName);\n    }\n\n    function _handleErrors() {\n        utils.process.on('uncaughtException', function(err) {\n            logger.log('Exception message:' + (err.stack || err.message));\n\n            _shutDown();\n        });\n    }\n\n    function _handleShutDown() {\n        utils.process.on('SIGINT', _shutDown);\n    }\n\n    function _shutDown(skipProcessExit) {\n        application.shutDown();\n\n        if(!skipProcessExit) {\n            utils.process.exit();\n        }\n    }\n    \n    return {\n        start: _start,\n        shutDown: _shutDown\n    };\n};","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/infrastructure/logger.js":"require('colors');\n\nvar moment = require('moment');\n\nmodule.exports = function() {\n    function _log(text) {\n        var timeStamp = moment().format('D/M/YY HH:mm:ss');\n\n        console.log('[bower] '.green, timeStamp.cyan, ' ', text);\n    }\n\n    function _error(text, exception) {\n        _log(text.red);\n\n        console.log(exception);\n    }\n\n    function _logHelp() {\n        console.log([\n        '              _          _           _',\n        '     _ __ _ _(_)_ ____ _| |_ ___ ___| |__  _____ __ _____ _ _',\n        '    | \\'_ \\\\ \\'_| \\\\ V / _` |  _/ -_)___| \\'_ \\\\/ _ \\\\ V  V / -_) \\'_|',\n        '    | .__/_| |_|\\\\_/\\\\__,_|\\\\__\\\\___|   |_.__/\\\\___/\\\\_/\\\\_/\\\\___|_|',\n        '    |_|',\n        'usage: private-bower [options]',\n            '',\n            'options:',\n            '  --h --help          Print this list and exit.',\n            '  --config            Path to the config file (Must be a valid json)'\n        ].join('\\n'));\n    }\n\n    return {\n        log: _log,\n        error: _error,\n\n        logHelp: _logHelp\n    };\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/gulpfile.js":"var gulp = require('gulp');\nvar mocha = require('gulp-mocha');\nvar runSequence = require('run-sequence');\n\ngulp.task('test', function(callback) {\n    runSequence('unit-test', 'feature-test', callback);\n});\n\ngulp.task('unit-test', function () {\n    var files = [\n        'lib/**/*.js'\n    ];\n    \n    return gulp.src(files, {read: false})\n        .pipe(mocha({reporter: 'nyan'}));\n});\n\ngulp.task('feature-test', function() {\n    var files = [\n        'lib/**/*.js',\n        '!lib/**/*.spec.js',\n        'features/**/*.js',\n        '!features/sandbox/**/*.js'\n    ];\n\n    return gulp.src(files, {read: false})\n        .pipe(mocha({\n            timeout: 6000,\n            reporter: 'nyan'\n        }));\n});","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/application.js":"var fs = require('fs');\nvar path = require('path');\nvar utils = require('./infrastructure/utils');\nvar logger = require('./infrastructure/logger');\nvar privatePackageStore = require('./service/packageStores/privatePackageStore');\nvar repoCacheHandler = require('./service/repoCaches/repoCacheHandler');\nvar publicPackageStore = require('./service/packageStores/publicPackageStore');\nvar configurationManager = require('./infrastructure/configurationManager');\n\nmodule.exports = function Application() {\n    var _serverApp;\n    var _staticHandler;\n    var _repoCacheHandler;\n    var _listeningServer;\n    var _siteBaseUrl;\n\n    function _setup(serverApp, staticHandler, siteBaseUrl) {\n        _serverApp = serverApp;\n        _staticHandler = staticHandler;\n        _siteBaseUrl = siteBaseUrl;\n    }\n\n    function _startPrivatePackageStore(registryFile) {\n        privatePackageStore.start({\n            persistFilePath: registryFile\n        });\n    }\n    \n    function _startPublicPackageStore() {\n        return publicPackageStore.start();\n    }\n    \n    function _startPublicRepositoryCache(repoCacheOptions) {\n        repoCacheHandler.start(repoCacheOptions);\n    }\n    \n    function _listen(port, hostName) {\n        _listeningServer = _serverApp.listen(port, hostName);\n    }\n    \n    function _serveStatic(staticPath) {\n        _addMiddleware(_staticHandler(staticPath));\n    }\n\n    function _addMiddleware(middleware) {\n        if (_siteBaseUrl) {\n            _serverApp.use(_siteBaseUrl, middleware);\n        }\n        else {\n            _serverApp.use(middleware);\n        }\n    }\n\n    function _addMiddlewareWithMount(route,middleware) {\n        _serverApp.use(route, middleware);\n    }\n\n    function _loadControllers(controllersRoot) {\n        fs.readdirSync(controllersRoot).forEach(loadControllerAtByName);\n        \n        function loadControllerAtByName(controllerPath) {\n            var controller = require(path.join(controllersRoot, controllerPath));\n            controller.bind(_serverApp, _siteBaseUrl);\n        }\n    }\n\n    function _shutDown() {\n        logger.log('Shutting down private-bower');\n        if(_listeningServer){\n            _listeningServer.close();\n        }\n        \n        publicPackageStore.shutDown();\n\n        if(_repoCacheHandler) {\n            _repoCacheHandler.shutDown();\n        }\n    }\n\n    function _restart() {\n        logger.log('Shutting down server for restart');\n\n        _shutDown();\n\n        logger.log('Restarting private-bower with config set to ' + configurationManager.configPath);\n\n        utils.startDetachedChildProcess('private-bower', ['--config',  configurationManager.configPath]);\n    }\n    \n    return {\n        setup: _setup,\n        restart: _restart,\n\n        listen: _listen,\n        addMiddleware: _addMiddleware,\n        addMiddlewareWithMount: _addMiddlewareWithMount,\n        loadControllers: _loadControllers,\n        serveStatic: _serveStatic,\n\n        shutDown: _shutDown,\n        \n        startPrivatePackageStore: _startPrivatePackageStore,\n        startPublicPackageStore: _startPublicPackageStore,\n        startPublicRepositoryCache: _startPublicRepositoryCache\n    };\n}();","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/infrastructure/utils.js":"var fs = require('fs');\nvar path = require('path');\nvar logger = require('./logger');\nvar Promise = require('bluebird');\nvar exec = require('child_process').exec;\nvar spawn = require('child_process').spawn;\n\nmodule.exports = function Utils() {\n    _init();\n    function _init() {\n        initExtensions();\n\n        function initExtensions() {\n            String.prototype.format = String.prototype.format || function format() {\n                var args = arguments;\n\n                return this.replace(/\\{(\\d+)\\}/g, function($0, $1) {\n                    return args[+$1];\n                });\n            };\n\n            String.prototype.startsWith = String.prototype.startsWith || function startsWith(searchString, position) {\n                position = position || 0;\n\n                return this.indexOf(searchString, position) === position;\n            };\n        }\n    }\n\n    function _getChildDirectories(directory) {\n        return fs.readdirSync(directory).filter(function(file) {\n            var filePath = path.join(directory, file);\n\n            return fs.lstatSync(filePath).isDirectory();\n        });\n    }\n\n    function _removeDirectory(dirPath) {\n        if(!fs.existsSync(dirPath)) {\n            return;\n        }\n\n        fs.readdirSync(dirPath).forEach(function(file) {\n            var currentFilePathPath = path.join(dirPath, file);\n\n            if(fs.lstatSync(currentFilePathPath).isDirectory()) {\n                _removeDirectory(currentFilePathPath);\n            }\n            else {\n                fs.unlinkSync(currentFilePathPath);\n            }\n        });\n\n        fs.rmdirSync(dirPath);\n    }\n\n    function _exec(command, cwd) {\n        return new Promise(function(resolve, reject) {\n            exec(command, {cwd: cwd}, function(error, stdout, stderr) {\n                if(error) {\n                    logger.log('Error during \"{0}\" in \"{1}\".\\n\\tOutput:\\n\\t\\tstdout: {2}\\n\\t\\tstderr: {3}'.format(command, cwd, stdout, stderr));\n\n                    reject(error);\n                }\n                else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n\n    function _extend(destination) {\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        args.forEach(function(srcArg) {\n            extendObject(destination, srcArg);\n        });\n\n        return destination;\n\n        function extendObject(dest, src) {\n            for(var propertyName in src) {\n                if(src.hasOwnProperty(propertyName)) {\n                    dest[propertyName] = src[propertyName];\n                }\n            }\n\n            return dest;\n        }\n    }\n\n    function _startDetachedChildProcess(command, args) {\n        var child = spawn(command, args, {\n            detached: true\n        });\n\n        child.stdout.pipe(process.stdout);\n        child.stderr.pipe(process.stderr);\n\n        child.unref();\n    }\n    \n    function _getRandomString() {\n        return Math.random().toString(36).substring(2);\n    }\n\n    return {\n        exec: _exec,\n        extend: _extend,\n        process: process,\n        getRandomString: _getRandomString,\n        dirname: path.join(__dirname, '../'),\n        removeDirectory: _removeDirectory,\n        getChildDirectories: _getChildDirectories,\n        startDetachedChildProcess: _startDetachedChildProcess\n    };\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/packageStores/privatePackageStore.js":"var fs = require('fs');\nvar logger = require('../../infrastructure/logger');\n\nmodule.exports = function PackageStore() {\n    var self = {\n        start: _start,\n\n        packages: {},\n\n        getPackage: _getPackage,\n        registerPackages: _registerPackages,\n        removePackages: _removePackages,\n\n        searchPackage: _searchPackage,\n\n        persistPackages: _persistPackages\n    };\n    \n    var _options;\n\n    function _start(options) {\n        _options = options;\n\n        _loadPackages();\n    }\n\n    function _getPackage(packageName) {\n        var item = self.packages[packageName];\n\n        if(!item) {\n            return null;\n        }\n\n        item.name = packageName;\n        item.hits = item.hits || 0;\n        item.hits++;\n\n        //could use yield\n        setTimeout(_persistPackages, 10);\n\n        return item;\n    }\n\n    function _registerPackages(register) {\n        for(var i = 0, len = register.length; i < len; i++) {\n            var registerPackage = register[i];\n\n            if(!registerPackage.name) {\n                logger.log('Undefined package name');\n\n                continue;\n            }\n\n            self.packages[registerPackage.name] = {\n                name: registerPackage.name,\n                url: registerPackage.url,\n                hits: 0\n            };\n\n            logger.log('Registered package: ' + registerPackage.name);\n        }\n\n        _persistPackages();\n    }\n\n    function _removePackages(remove) {\n        for(var i = 0, len = remove.length; i < len; i++) {\n            delete self.packages[remove[i]];\n\n            logger.log('Removed package: ' + remove[i]);\n        }\n\n        _persistPackages();\n    }\n\n    function _persistPackages() {\n        if(fs.existsSync(_options.persistFilePath)) {\n            fs.unlinkSync(_options.persistFilePath);\n        }\n\n        fs.writeFileSync(_options.persistFilePath, JSON.stringify(self.packages, null, '    '));\n    }\n\n    function _loadPackages() {\n        if(!fs.existsSync(_options.persistFilePath)) {\n            return;\n        }\n\n        var json = fs.readFileSync(_options.persistFilePath).toString();\n\n        try {\n            self.packages = modifyRepoProperty(JSON.parse(json));\n        }\n        catch(e) {\n            logger.error('Malformed registry file. It must be a valid json: ' + _options.persistFilePath, e);\n\n            throw e;\n        }\n\n        function modifyRepoProperty(packages) {\n            var loadedPackages = {};\n\n            for(var key in packages) {\n                var pack = packages[key];\n\n                loadedPackages[pack.name] = {\n                    name: pack.name,\n                    url: pack.repo || pack.url,\n                    hits: pack.hits\n                };\n            }\n\n            return loadedPackages;\n        }\n    }\n\n    function _searchPackage(name) {\n        var searchName = name.toLowerCase();\n        var packages = [];\n\n        for(var packageName in self.packages) {\n            if(self.packages.hasOwnProperty(packageName) &&\n                packageName.toLowerCase().indexOf(searchName) !== -1) {\n\n                var item = self.packages[packageName];\n                packages.push({\n                    name: item.name,\n                    url: item.url\n                });\n            }\n        }\n\n        return packages;\n    }\n\n    return self;\n}();","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/repoCaches/repoCacheHandler.js":"var Promise = require('bluebird');\n\nvar GitRepoCache = require('./gitRepoCache');\nvar SvnRepoCache = require('./svnRepoCache');\n\nmodule.exports = function RepoCacheHandler() {\n    var self = {\n        start: _start,\n\n        getRepoCache: _getRepoCache,\n        removePackages: _removePackages,\n        getRepoAllCaches: _getRepoAllCaches,\n\n        getLatestForRepos: _getLatestForRepos,\n\n        shutDown: _shutDown\n    };\n\n    var _gitRepoCache;\n    var _svnRepoCache;\n\n    var _repoCaches = [];\n\n    function _start(options) {\n        self.enabled = true;\n\n        if(options.git) {\n            _gitRepoCache = new GitRepoCache(options.git);\n            _repoCaches.push(_gitRepoCache);\n        }\n\n        if(options.svn) {\n            _svnRepoCache = new SvnRepoCache(options.svn);\n            _repoCaches.push(_svnRepoCache);\n        }\n    }\n\n    function _getRepoCache(repoUrl) {\n        if(repoUrl.indexOf('svn+') !== -1) {\n            return _svnRepoCache;\n        }\n\n        return _gitRepoCache;\n    }\n\n    function _getRepoAllCaches() {\n        return _repoCaches;\n    }\n\n    function _shutDown() {\n        _repoCaches.forEach(function(repoCache) {\n            repoCache.shutDown();\n        });\n    }\n\n    function _removePackages(packageNames) {\n        _repoCaches.forEach(function(repoCache) {\n            packageNames.forEach(function(packageName) {\n                repoCache.removeRepo(packageName);\n            });\n        });\n    }\n\n    function _getLatestForRepos() {\n        return Promise.all(_repoCaches.map(function(repoCache) {\n            return repoCache.getLatestForRepos();\n        }));\n    }\n\n    return self;\n}();","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/repoCaches/gitRepoCache.js":"var fs = require('fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar utils = require('../../infrastructure/utils');\nvar Promise = require('bluebird');\nvar logger = require('../../infrastructure/logger');\nvar exec = require('child_process').exec;\n\nvar RepoCacheBase = require('./repoCacheBase');\n\nmodule.exports = function GitRepoCache(options) {\n    var base = new RepoCacheBase(options);\n    var _daemon;\n\n    _init();\n    function _init() {\n        return _createDirectory(options.repoCacheRoot)\n            .then(_checkGitInstalled)\n            .then(function() {\n                return new Promise(function(resolve) {\n                    if (options.refreshDisabled) {\n                        logger.log('Refresh of cached Git repositories is disabled');\n                    }\n                    else {\n                        setInterval(_getLatestForRepos, options.refreshTimeout * 60 * 1000);\n                    }\n                    resolve();\n                });\n            })\n            .then(_startGitDaemon)\n            .catch(function(err) {\n                logger.error('Failed to initialize public repository cache');\n                process.nextTick(function() {\n                    throw err;\n                });\n            });\n    }\n\n    function _cacheRepo(repoName, repoUrl) {\n        return new Promise(function(resolve, reject) {\n            var repoAccessAddress = base.getRepoAccessAddress();\n            var repo = '{0}://{1}/{2}'.format(options.protocol, repoAccessAddress, repoName);\n\n            var repoObject = {\n                name: repoName,\n                url: repo\n            };\n\n            var repoDirectory = path.join(options.repoCacheRoot, repoName);\n\n            if(fs.existsSync(repoDirectory)) {\n                resolve(repoObject);\n\n                return promise;\n            }\n\n            _cloneGitRepo(repoUrl, repoName)\n                .then(function() {\n                    resolve(repoObject);\n                })\n                .catch(function(err) {\n                    logger.error('Failed to clone (maybe folder exists)' + repoUrl);\n                    logger.error(err);\n\n                    reject();\n                });\n        });\n    }\n\n    function _checkGitInstalled() {\n        return utils.exec('git --version')\n            .catch(function(error) {\n                logger.error('Git must be installed');\n                return error;\n            });\n    }\n\n    function _createDirectory(dir) {\n        return new Promise(function(resolve, reject) {\n            mkdirp(dir, function(err) {\n                if(err) {\n                    reject();\n                    return;\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    function _startGitDaemon() {\n        return new Promise(function(resolve, reject) {\n            var customParameters = base.generateCustomParameters();\n\n            var gitCommand = 'git daemon --reuseaddr --base-path=\"{0}\" --listen={1} --port={2} --export-all{3}';\n            if (!options.hostName) {\n                gitCommand = 'git daemon --reuseaddr --base-path=\"{0}\" --port={2} --export-all{3}';\n            }\n            gitCommand = gitCommand.format(options.repoCacheRoot, options.hostName, options.port, customParameters);\n\n            logger.log('Starting git cache server');\n\n            _daemon = exec(gitCommand, {cwd: options.repoCacheRoot}, function(error) {\n                if(error) {\n                    reject(error);\n                    return;\n                }\n\n                logger.log('Git cache server started');\n\n                resolve();\n            });\n        });\n    }\n\n    function _cloneGitRepo(repoUrl, repoName) {\n        var gitCommand = 'git clone {0} {1}'.format(repoUrl, repoName);\n\n        logger.log('Cloning {0} ...'.format(repoName));\n\n        return utils.exec(gitCommand, options.repoCacheRoot)\n            .then(function() {\n                logger.log('Cloned {0} git repository to private'.format(repoName));\n            });\n    }\n\n    function _getLatestForRepos() {\n        logger.log('Refreshing cached public git repositories');\n\n        return base.getLatestForRepos(pullLatest);\n\n        function pullLatest(packageDirectory) {\n            var packageDirPath = path.join(options.repoCacheRoot, packageDirectory);\n\n            return new Promise(function(resolve, reject) {\n                if(fs.existsSync(packageDirPath)) {\n                    fetchRepository()\n                        .then(hardResetRepository)\n                        .then(function() {\n                            logger.log('Pulled latest for {0}'.format(path.basename(packageDirectory)));\n                            resolve();\n                        })\n                        .catch(function(error) {\n                            if(error && error.message) {\n                                logger.error(error.message)\n                            }\n                            reject(error);\n                        });\n                }\n                else {\n                    logger.log('Could not pull latest, because \"{0}\" directory cannot be found'.format(packageDirPath));\n\n                    resolve();\n                }\n            });\n\n            function fetchRepository() {\n                return utils.exec('git fetch --prune --tags', packageDirPath);\n            }\n\n            function hardResetRepository() {\n                return utils.exec('git reset --hard origin/master', packageDirPath);\n            }\n        }\n    }\n\n    function _shutDown() {\n        logger.log('Stopping git cache server');\n\n        if(_daemon) {\n            _daemon.kill();\n        }\n    }\n\n    return utils.extend({}, base, {\n        shutDown: _shutDown,\n        cacheRepo: _cacheRepo,\n        getLatestForRepos: _getLatestForRepos\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/repoCaches/repoCacheBase.js":"var path = require('path');\nvar utils = require('../../infrastructure/utils');\nvar Promise = require('bluebird');\nvar exec = require('child_process').exec;\n\nmodule.exports = function RepoCacheBase(options) {\n    function _getLatestForRepos(pullLatest) {\n        return new Promise(function(resolve, reject) {\n            var childDirectories = utils.getChildDirectories(options.repoCacheRoot);\n\n            pullLatestForAllRepos(childDirectories)\n                .then(resolve)\n                .catch(reject);\n        });\n\n        function pullLatestForAllRepos(childDirectories) {\n            return new Promise(function(resolve, reject) {\n                var pullLatestProcesses = [];\n\n                childDirectories.forEach(function(directory) {\n                    pullLatestProcesses.push(pullLatest(directory));\n                });\n\n                Promise.all(pullLatestProcesses)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        }\n    }\n\n    function _getRepoAccessAddress() {\n        if(options.publicAccessURL){\n            return options.publicAccessURL;\n        }\n        else {\n            return options.hostName + ':' + options.port;\n        }\n    }\n\n    function _removeRepo(repoName) {\n        var childDirectories = utils.getChildDirectories(options.repoCacheRoot);\n\n        if(childDirectories.indexOf(repoName) === -1) {\n            return;\n        }\n\n        utils.removeDirectory(path.join(options.repoCacheRoot, repoName));\n    }\n\n    function _generateCustomParameters() {\n        if(!options.parameters) {\n            return '';\n        }\n\n        var customParameters = '';\n\n        for(var prop in options.parameters) {\n            if(options.parameters.hasOwnProperty(prop)) {\n                customParameters += ' --{0}'.format(prop);\n                if(options.parameters[prop] !== '') {\n                    customParameters += '={0}'.format(options.parameters[prop]);\n                }\n            }\n        }\n\n        return customParameters;\n    }\n\n    function _shutDown() {\n        throw new Error('Must implement shutDown function on repoCache');\n    }\n\n    return {\n        getLatestForRepos: _getLatestForRepos,\n        getRepoAccessAddress: _getRepoAccessAddress,\n        removeRepo: _removeRepo,\n\n        generateCustomParameters: _generateCustomParameters,\n\n        shutDown: _shutDown\n    };\n};","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/repoCaches/svnRepoCache.js":"var path = require('path');\nvar mkdirp = require('mkdirp');\nvar utils = require('../../infrastructure/utils');\nvar Promise = require('bluebird');\nvar logger = require('../../infrastructure/logger');\nvar exec = require('child_process').exec;\n\nvar RepoCacheBase = require('./repoCacheBase');\n\nmodule.exports = function SvnRepoCache(options) {\n    var base = new RepoCacheBase(options);\n    var _daemon;\n\n    _init();\n    function _init() {\n        return _createDirectory(options.repoCacheRoot)\n            .then(_checkSvnInstalled)\n            .then(function() {\n                if (options.refreshDisabled) {\n                    logger.log('Refresh of cached SVN repositories is disabled');\n                }\n                else {\n                    setInterval(_getLatestForRepos, options.refreshTimeout * 60 * 1000);\n                }\n            })\n            .then(_startSvnDaemon)\n            .catch(function(err) {\n                logger.error('Failed to initialize public repository cache');\n                process.nextTick(function() {\n                    throw err;\n                });\n            });\n    }\n\n    function _cacheRepo(repoName, repoUrl) {\n        return new Promise(function(resolve, reject) {\n            var packageDirectory = path.join(options.repoCacheRoot, repoName);\n\n            _createDirectory(packageDirectory)\n                .then(function() {\n                    return _cloneSvnRepo(repoUrl, packageDirectory, repoName);\n                })\n                .then(function() {\n                    var repoAccessAddress = base.getRepoAccessAddress();\n                    var repo = '{0}://{1}/{2}'.format(options.protocol, repoAccessAddress, repoName);\n\n                    resolve({\n                        name: repoName,\n                        url: repo\n                    });\n                })\n                .catch(function(err) {\n                    logger.error('Failed to clone (maybe folder exists)' + repoUrl);\n                    logger.error(err);\n\n                    reject();\n                });\n        });\n    }\n\n    function _checkSvnInstalled() {\n        return utils.exec('svnserve --version');\n    }\n\n    function _createDirectory(dir) {\n        return new Promise(function(resolve, reject) {\n            mkdirp(dir, function(err) {\n                if(err) {\n                    reject();\n                    return;\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    function _startSvnDaemon() {\n        return new Promise(function(resolve, reject) {\n            var customParameters = base.generateCustomParameters();\n\n            var svnCommand = 'svnserve -d --foreground -r \"{0}\" --listen-host {1} --listen-port {2}{3}';\n            if (!options.hostName) {\n                svnCommand = 'svnserve -d --foreground -r \"{0}\" --listen-port {2}{3}';\n            }\n\n            svnCommand = svnCommand.format(options.repoCacheRoot, options.hostName, options.port, customParameters);\n\n            logger.log('Starting svn cache server');\n\n            _daemon = exec(svnCommand, {cwd: options.repoCacheRoot}, function(error, stdout, stderr) {\n                if(error) {\n                    reject(stderr);\n                    return;\n                }\n\n                logger.log('Svn cache server started');\n\n                resolve();\n            });\n        });\n    }\n\n    function _cloneSvnRepo(repoUrl, packageDirectory, repoName) {\n        logger.log('Cloning {0} ...'.format(repoName));\n\n        // remove string 'svn+' if isn't 'ssh' url.\n        if (repoUrl.indexOf('ssh://') == -1) {\n            repoUrl = repoUrl.replace('svn+', '');\n        }\n\n        var svnCommand = 'svn co {0} ./'.format(repoUrl);\n\n        return utils.exec(svnCommand, packageDirectory)\n            .then(function() {\n                logger.log('Cloned {0} svn repository to private'.format(repoName));\n            });\n    }\n\n    function _getLatestForRepos() {\n        logger.log('Refreshing cached public svn repositories');\n\n        return base.getLatestForRepos(pullLatest);\n\n        function pullLatest(packageDirectory) {\n            return utils.exec('svn update', packageDirectory)\n                .then(function() {\n                    logger.log('Updated latest for {0}'.format(path.basename(packageDirectory)));\n                });\n        }\n    }\n\n    function _shutDown() {\n        logger.log('Stopping svn cache server');\n\n        if(_daemon) {\n            _daemon.kill();\n        }\n    }\n\n    return utils.extend({}, base, {\n        shutDown: _shutDown,\n        cacheRepo: _cacheRepo,\n        getLatestForRepos: _getLatestForRepos\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/packageStores/publicPackageStore.js":"var fs = require('fs');\nvar logger = require('../../infrastructure/logger');\nvar Client = require('node-rest-client').Client;\nvar config = require('../../infrastructure/configurationManager').config;\nvar URI = require('URIjs');\nvar Promise = require('bluebird');\n\nmodule.exports = function PublicPackageStore() {\n    var _packages = {};\n    var _publicBowerUrl;\n\n    var _timer;\n\n    function _start() {\n        logger.log('Refreshing public packages...');\n\n        _publicBowerUrl = config.public.registry;\n\n        _loadPublicRegistryFromCache();\n\n        return _loadPublicPackagesPeriodically();\n    }\n\n    function _getPackage(packageName) {\n        return _packages[packageName];\n    }\n\n    function _parsePackage(data) {\n        var jsonData;\n        try {\n            if (data instanceof Array || data instanceof Object) {\n              jsonData = data;\n            } else {\n              jsonData = JSON.parse(data);\n            }\n\n            for(var i = 0, len = jsonData.length; i < len; i++) {\n                var item = jsonData[i];\n                _packages[item.name] = item;\n            }\n\n            return true;\n        } catch(e) {\n            logger.error('Could not load public packages, invalid data!', e);\n            logger.error('data = ' + data);\n        }\n    }\n\n    function _loadPublicRegistryFromCache() {\n        if(!config.public.registryFile || !fs.existsSync(config.public.registryFile)) {\n            return;\n        }\n\n        var data = fs.readFileSync(config.public.registryFile);\n\n        var result = _parsePackage(data);\n\n        if(result) {\n            logger.log(\"Cached public packages loaded\");\n        }\n    }\n\n    function _cachePublicRegistry(data) {\n        if(!config.public.registryFile) {\n            return;\n        }\n\n        fs.writeFile(config.public.registryFile, JSON.stringify(data), function(err) {\n            if(err) {\n                logger.error('Error caching public registry', err);\n            }\n            else {\n                logger.log('Public registry cached');\n            }\n        });\n    }\n\n    function _loadPublicPackagesPeriodically() {\n        return new Promise(function(resolve, reject) {\n            var client = createClient();\n\n            var url = new URI(_publicBowerUrl);\n            // set content-type header and data as json in args parameter\n            var args = {\n                headers:{\n                    \"Content-Type\": \"application/json\",\n                    'host': url.hostname()\n                }\n            };\n\n            client.get(_publicBowerUrl, args, function(data) {\n                processData(data);\n\n                resolve();\n            }).on('error', function(err) {\n                logger.error('something went wrong on the request', err.request.options);\n\n                reject();\n            });\n\n            client.on('error', function(err) {\n                logger.error('Something went wrong on the client', err);\n\n                reject();\n            });\n\n            function processData(data) {\n                try {\n                    var result = _parsePackage(data);\n\n                    if(result) {\n                        _cachePublicRegistry(data);\n\n                        logger.log('Loaded public packages');\n                    }\n                }\n                catch (e) {\n                    logger.error('Could not load public packages: data=' + data, e);\n                }\n            }\n\n            function createClient() {\n                var clientOptions;\n\n                if(config.proxySettings && config.proxySettings.enabled) {\n                    clientOptions = {\n                        proxy: {\n                            host: config.proxySettings.host,\n                            port: config.proxySettings.port,\n                            user: config.proxySettings.username,\n                            password: config.proxySettings.password,\n                            tunnel: config.proxySettings.tunnel\n                        }\n                    };\n                }\n\n                return new Client(clientOptions);\n            }\n\n            // re-schedule the function\n            _timer = setTimeout(_loadPublicPackagesPeriodically, 1000 * 60 * 30);\n        });\n    }\n\n    function _searchPackage(name) {\n        var searchName = name.toLowerCase();\n        var packages = [];\n\n        for(var packageName in _packages) {\n            if(_packages.hasOwnProperty(packageName) &&\n                packageName.toLowerCase().indexOf(searchName) !== -1) {\n\n                var item = _packages[packageName];\n                packages.push({\n                    name: item.name,\n                    url: item.url\n                });\n            }\n        }\n\n        return packages;\n    }\n\n    function _shutDown() {\n        clearTimeout(_timer);\n    }\n\n    return {\n        start: _start,\n\n        getPackage: _getPackage,\n        searchPackage: _searchPackage,\n        shutDown: _shutDown\n    };\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/infrastructure/configurationManager.js":"var fs = require('fs');\nvar path = require('path');\nvar log4js = require('log4js');\nvar utils = require('./utils');\nvar pathIsAbsolute = require('path-is-absolute');\n\nvar logger = require('./logger');\n\nmodule.exports = function ConfigurationManager() {\n    var self = {\n        config: {\n            port: 5678,\n            timeout: 2 * 60 * 1200\n        },\n        loadConfiguration: _loadConfiguration\n    };\n    \n    function _loadConfiguration(configPath) {\n        if(!fs.existsSync(configPath)) {\n            logger.error('config file not found at ' + configPath);\n        }\n\n        self.configPath = configPath;\n    \n        var configDirectory = path.join(configPath, '../');\n    \n        var json = fs.readFileSync(configPath).toString();\n        var configFile = JSON.parse(json);\n        \n        utils.extend(self.config, configFile);\n    \n        setConfigValues();\n        configureLog4Js();\n        \n        function setConfigValues() {\n            self.config.registryFile = getRelativeFilePath(configFile.registryFile || './bowerRepository.json');\n            self.config.server = self.config.server || {};\n            self.config.server.port = utils.process.env.PORT || self.config.server.port || self.config.port;\n            self.config.server.hostName = utils.process.env.IP || self.config.server.hostName || self.config.hostName || '0.0.0.0';\n            self.config.server.siteBaseURL = self.config.server.siteBaseURL || null;\n\n            self.config.public = self.config.public || {};\n\n            self.config.public.registryFile = getRelativeFilePath(configFile.public.registryFile || './bowerRepositoryPublic.json');\n            self.config.public.registry = self.config.public.registry || 'https://bower.herokuapp.com/packages';\n\n            self.config.public.whitelist = self.config.public.whitelist || [];\n            self.config.public.whitelist.enabled = !!self.config.public.whitelist.length;\n\n            self.config.public.blacklist = self.config.public.blacklist || [];\n            self.config.public.blacklist.enabled = !!self.config.public.blacklist.length;\n\n            self.config.repoCacheOptions = {};\n\n            if(self.config.repositoryCache.svn && self.config.repositoryCache.svn.enabled) {\n                self.config.repoCacheOptions.svn = {\n                    repoCacheRoot: getRelativeFilePath(self.config.repositoryCache.svn.cacheDirectory || './svnRepoCache'),\n                    hostName: self.config.repositoryCache.svn.host,\n                    port: self.config.repositoryCache.svn.port || 7891,\n                    protocol: self.config.repositoryCache.svn.protocol || 'svn',\n                    refreshDisabled: self.config.repositoryCache.svn.refreshDisabled || false, \n                    refreshTimeout: self.config.repositoryCache.svn.refreshTimeout || 10,\n                    parameters: self.config.repositoryCache.svn.parameters\n                };\n            }\n\n            if(self.config.repositoryCache.git && self.config.repositoryCache.git.enabled) {\n                self.config.repoCacheOptions.git = {\n                    repoCacheRoot: getRelativeFilePath(self.config.repositoryCache.git.cacheDirectory || './gitRepoCache'),\n                    hostName: self.config.repositoryCache.git.host,\n                    publicAccessURL: self.config.repositoryCache.git.publicAccessURL || null,\n                    port: self.config.repositoryCache.git.port || 6789,\n                    protocol: self.config.repositoryCache.git.protocol || 'git',\n                    refreshDisabled: self.config.repositoryCache.git.refreshDisabled || false,\n                    refreshTimeout: self.config.repositoryCache.git.refreshTimeout || 10,\n                    parameters: self.config.repositoryCache.git.parameters\n                };\n            }\n\n            self.config.repositoryCache.enabled = self.config.repoCacheOptions.svn || self.config.repoCacheOptions.git;\n\n            function getRelativeFilePath(filePath) {\n                if((path.isAbsolute && path.isAbsolute(filePath)) || pathIsAbsolute(filePath)) {\n                    return filePath;\n                }\n\n                return path.resolve(path.join(configDirectory, filePath));\n            }\n        }\n        \n        function configureLog4Js() {\n            if(self.config.log4js && self.config.log4js.enabled)  {\n                log4js.configure(self.config.log4js.configPath);\n            }\n        }\n    }\n    \n    return self;\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/site/modules.js":"angular.module('PrivateBower', ['ngAnimate']);","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/extensions/string.js":"String.prototype.format = String.prototype.format || function format() {\n    var args = arguments;\n\n    return this.replace(/\\{(\\d+)\\}/g, function($0, $1) {\n        return args[+$1];\n    });\n};\n\nString.prototype.startsWith = String.prototype.startsWith || function startsWith(searchString, position) {\n   position = position || 0;\n\n    return this.indexOf(searchString, position) === position;\n};","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/gitPackageDetailsProvider.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('bluebird');\n\nvar utils = require('../infrastructure/utils');\n\nmodule.exports = function GitPackageDetailsProvider() {\n    var tempFolder = path.join(utils.dirname, 'temp/packageDetails');\n\n    function _getPackageDetails(packageUrl) {\n        return new Promise(function(resolve, reject) {\n            var tempName = utils.getRandomString();\n            var gitCloneFolder = path.join(tempFolder, tempName);\n\n            utils.exec('git clone {0} {1} --depth=1'.format(packageUrl, gitCloneFolder))\n                .then(function() {\n                    var bowerJsonLocation = path.join(gitCloneFolder, 'bower.json');\n\n                    var fileContent = fs.readFileSync(bowerJsonLocation);\n                    var bowerJson = JSON.parse(fileContent);\n\n                    utils.removeDirectory(gitCloneFolder);\n\n                    resolve(bowerJson);\n                })\n                .catch(reject);\n        });\n    }\n\n    return {\n        getPackageDetails: _getPackageDetails\n    };\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/packageDetailsProvider.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('bluebird');\n\nvar GitPackageDetailsProvider = require('./gitPackageDetailsProvider');\nvar SvnPackageDetailsProvider = require('./svnPackageDetailsProvider');\n\nvar utils = require('../infrastructure/utils');\n\nmodule.exports = function PackageDetailsProvider() {\n    function _getPackageDetails(packageUrl) {\n        if(packageUrl.startsWith('svn+')) {\n            return SvnPackageDetailsProvider.getPackageDetails(packageUrl);\n        }\n        return GitPackageDetailsProvider.getPackageDetails(packageUrl);\n    }\n\n    return {\n        getPackageDetails: _getPackageDetails\n    };\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/svnPackageDetailsProvider.js":"\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('bluebird');\n\nvar utils = require('../infrastructure/utils');\n\nmodule.exports = function SvnPackageDetailsProvider() {\n    var tempFolder = path.join(utils.dirname, 'temp/packageDetails');\n\n    function _getPackageDetails(packageUrl) {\n        return new Promise(function(resolve, reject) {\n            var tempName = utils.getRandomString();\n            var svnCloneFolder = path.join(tempFolder, tempName);\n\n            // remove string 'svn+' if isn't 'ssh' url.\n            if (packageUrl.indexOf('ssh://') == -1) {\n                packageUrl = packageUrl.replace('svn+', '');\n            }\n\n            // set to trunk to get the info.\n            if (packageUrl.slice(-1) === '/') {\n                packageUrl = packageUrl + 'trunk';\n            } else {\n                packageUrl = packageUrl + '/trunk';\n            }\n\n            utils.exec('svn co {0} {1} --depth files'.format(packageUrl, svnCloneFolder))\n                .then(function() {\n                    var bowerJsonLocation = path.join(svnCloneFolder, 'bower.json');\n\n                    var fileContent = fs.readFileSync(bowerJsonLocation);\n                    var bowerJson = JSON.parse(fileContent);\n\n                    utils.removeDirectory(svnCloneFolder);\n\n                    resolve(bowerJson);\n                })\n                .catch(reject);\n        });\n    }\n\n    return {\n        getPackageDetails: _getPackageDetails\n    };\n}();\n","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/service/packageManager.js":"var Promise = require('bluebird');\n\nvar repoCacheHandler = require('./repoCaches/repoCacheHandler');\nvar privatePackageStore = require('./packageStores/privatePackageStore');\nvar publicPackageStore = require('./packageStores/publicPackageStore');\nvar packageDetailsProvider = require('./packageDetailsProvider');\n\nvar config = require('../infrastructure/configurationManager').config;\nvar logger = require('../infrastructure/logger');\n\nmodule.exports = function PackageManager() {\n\n    function _getPrivatePackages() {\n        var packages = [];\n\n        for(var packageName in privatePackageStore.packages) {\n            if(privatePackageStore.packages.hasOwnProperty(packageName)) {\n                var item = privatePackageStore.packages[packageName];\n    \n                packages.push({\n                    name: item.name,\n                    url: item.url,\n                    hits: item.hits\n                });\n            }\n        }\n        \n        return packages;\n    }\n    \n    function _registerPackages(packages) {\n        privatePackageStore.registerPackages(packages);\n    }\n    \n    function _removePackages(packages) {\n        privatePackageStore.removePackages(packages);\n\n        if(repoCacheHandler.enabled) {\n            repoCacheHandler.removePackages(packages);\n        }\n    }\n\n    function _searchPackage(searchName) {\n        var packages = privatePackageStore.searchPackage(searchName);\n\n        if(!config.public.disabled) {\n            var publicPackages = publicPackageStore.searchPackage(searchName);\n\n            publicPackages = filterOnlyWhitelist(publicPackages);\n\n            publicPackages = filterBlacklist(publicPackages);\n\n            packages = packages.concat(publicPackages);\n        }\n\n        return packages;\n\n        function filterOnlyWhitelist(list) {\n            if(!config.public.whitelist.enabled) {\n                return list;\n            }\n\n            return list.filter(function(packageName) {\n                return config.public.whitelist.indexOf(packageName) > -1;\n            });\n        }\n\n        function filterBlacklist(list) {\n            if(!config.public.blacklist.enabled) {\n                return list;\n            }\n\n            return list.filter(function(packageName) {\n                return config.public.blacklist.indexOf(packageName) === -1;\n            });\n        }\n    }\n    \n    function _getPackageDetails(packageName) {\n        return _getPackageForInstall(packageName)\n            .then(function(packageDescription) {\n                return packageDetailsProvider.getPackageDetails(packageDescription.url)\n            });\n    }\n\n    //TODO: should refactor this\n    function _getPackageForInstall(packageName) {\n        return new Promise(function(resolve, reject) {\n            var privatePackage = privatePackageStore.getPackage(packageName);\n\n            if(privatePackage) {\n                handlePrivatePackage();\n            }\n            else if(canHandlePublicPackage()) {\n                handlePublicPackage();\n            }\n            else {\n                reject();\n            }\n\n            function canHandlePublicPackage() {\n                var isValidByWhitelist = !config.public.whitelist.enabled || config.public.whitelist.indexOf(packageName) > -1;\n                var notExcludedByBlacklist = !config.public.blacklist.enabled || config.public.blacklist.indexOf(packageName) !== -1;\n\n                return !config.public.disabled && isValidByWhitelist && notExcludedByBlacklist;\n            }\n\n            function handlePrivatePackage() {\n                if(config.repositoryCache && config.repositoryCache.cachePrivate) {\n                    if(privatePackage.cachedRepo) {\n                        resolve({\n                            name: packageName,\n                            url: privatePackage.cachedRepo,\n                            hits: privatePackage.hits\n                        });\n                    }\n                    else if(repoCacheHandler) {\n                        cachePrivateRepoAndSend();\n                    }\n                    else {\n                        sendPrivatePackage();\n                    }\n                }\n                else {\n                    sendPrivatePackage();\n                }\n\n                function cachePrivateRepoAndSend() {\n                    var repoCache = repoCacheHandler.getRepoCache(privatePackage.url);\n\n                    repoCache.cacheRepo(packageName, privatePackage.url)\n                        .then(function(pack) {\n                            privatePackage.cachedRepo = pack.url;\n                            privatePackageStore.persistPackages();\n\n                            resolve({\n                                name: packageName,\n                                url: privatePackage.cachedRepo,\n                                hits: privatePackage.hits\n                            });\n                        })\n                        .catch(sendPrivatePackage);\n                }\n\n                function sendPrivatePackage() {\n                    resolve({\n                        name: packageName,\n                        url: privatePackage.url,\n                        hits: privatePackage.hits\n                    });\n                }\n            }\n\n            function handlePublicPackage() {\n                var publicPackage = publicPackageStore.getPackage(packageName);\n                if(publicPackage) {\n                    if(repoCacheHandler.enabled) {\n                        cachePublicRepo();\n                    }\n                    else {\n                        resolve(publicPackage);\n                    }\n                }\n                else {\n                    reject();\n                }\n\n                function cachePublicRepo() {\n                    var repoCache = repoCacheHandler.getRepoCache(publicPackage.url);\n\n                    repoCache.cacheRepo(packageName, publicPackage.url)\n                        .then(function(pack) {\n                            var privatePackage = {\n                                name: packageName,\n                                url: pack.url,\n                                hits: 1\n                            };\n\n                            privatePackageStore.registerPackages([privatePackage]);\n\n                            resolve({\n                                name: privatePackage.name,\n                                url: privatePackage.url,\n                                hits: privatePackage.hits\n                            });\n                        })\n                        .catch(function() {\n                            resolve(publicPackage);\n                        });\n                }\n            }\n        });\n    }\n\n    function _refresh() {\n        logger.log('Refreshing repository');\n\n        return repoCacheHandler.getLatestForRepos();\n    }\n\n    return {\n        refresh: _refresh,\n        removePackages: _removePackages,\n        searchPackage: _searchPackage,\n        registerPackages: _registerPackages,\n        getPrivatePackages: _getPrivatePackages,\n        getPackageDetails: _getPackageDetails,\n        getPackageForInstall: _getPackageForInstall\n    };\n}();","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/site/controllers/authenticationController.js":"angular.module('PrivateBower')\n    .controller('authenticationController', function($q, $http, userContextService, notAuthenticatedInterceptor) {\n        var self = angular.extend(this, {\n            error: null,\n            originalCallRejection: null,\n            authenticationDeferred: null,\n            authenticationDialogOpened: false,\n\n            authenticate: _authenticate,\n            cancelAuthentication: _cancelAuthentication\n        });\n\n        _init();\n        function _init() {\n            if(!notAuthenticatedInterceptor.authenticationResolver) {\n                notAuthenticatedInterceptor.authenticationResolver = _onAuthenticationError;\n            }\n        }\n\n        function _onAuthenticationError(originalCallRejection) {\n            if(self.authenticationDialogOpened && self.authenticationDeferred) {\n                return $q.reject(originalCallRejection);\n            }\n\n            self.authenticationDeferred = $q.defer();\n            self.originalCallRejection = originalCallRejection;\n\n            self.authenticationDialogOpened = true;\n\n            return self.authenticationDeferred.promise;\n        }\n\n        function _authenticate(authenticationToken) {\n            userContextService.setAuthenticationToken(authenticationToken);\n\n            makeOriginalCall();\n\n            function makeOriginalCall() {\n                var originalCall = self.originalCallRejection.config;\n                $http[originalCall.method.toLowerCase()](originalCall.url, originalCall.data)\n                    .success(function(data) {\n                        self.error = null;\n                        self.authenticationDialogOpened = false;\n                        self.authenticationDeferred.resolve(data);\n                        self.authenticationDeferred = null;\n                        self.originalCallRejection = null;\n                    })\n                    .error(function() {\n                        self.error = 'Invalid authentication token!';\n                    });\n            }\n        }\n\n        function _cancelAuthentication() {\n            self.error = null;\n            self.authenticationDialogOpened = false;\n\n            self.authenticationDeferred.reject({\n                data: 'Authentication failed!'\n            });\n\n            self.authenticationDeferred = null;\n            self.originalCallRejection = null;\n        }\n    });","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/site/controllers/mainController.js":"angular.module('PrivateBower')\n    .controller('mainController', function($http) {\n        var self = angular.extend(this, {\n            packages: null,\n            error: false,\n\n            addPackageError: null,\n            addPackageDialogOpened: false,\n            addPackage: _addPackage,\n            addPackageButtonClick: _addPackageButtonClick,\n            cancelAddPackageClick: _cancelAddPackageClick,\n\n            packageToRemove: null,\n            removePackageError: null,\n            removePackageDialogOpened: false,\n            removePackage: _removePackage,\n            removePackageButtonClick: _removePackageButtonClick,\n            cancelRemovePackageClick: _cancelRemovePackageClick,\n            \n            togglePackageDetailsOpened: _togglePackageDetailsOpened\n        });\n\n        _init();\n        function _init() {\n            _getPackages();\n        }\n\n        function _getPackages() {\n            $http.get('packages')\n                .success(function(packages) {\n                    self.packages = packages.map(function(pack) {\n                        pack.siteUrl = pack.url.replace('git://', 'https://');\n\n                        return pack;\n                    });\n                })\n                .error(function(error) {\n                    self.error = true;\n                });\n        }\n\n        function _addPackageButtonClick() {\n            self.addPackageDialogOpened = true;\n        }\n\n        function _cancelAddPackageClick() {\n            self.addPackageDialogOpened = false;\n        }\n\n        function _addPackage(packageName, packageUrl) {\n            $http.post('packages/' + packageName, {\n                url: packageUrl\n            })\n                .success(function() {\n                    self.addPackageDialogOpened = false;\n\n                    _getPackages();\n                })\n                .error(function(error) {\n                    self.addPackageError = error;\n                });\n        }\n\n        function _removePackageButtonClick(packageName) {\n            self.packageToRemove = packageName;\n\n            self.removePackageDialogOpened = true;\n        }\n\n        function _cancelRemovePackageClick() {\n            self.removePackageDialogOpened = false;\n        }\n\n        function _removePackage(packageName) {\n            $http.delete('packages/' + packageName)\n                .success(function() {\n                    self.packageToRemove = null;\n                    self.removePackageDialogOpened = false;\n\n                    _getPackages();\n                })\n                .error(function(error) {\n                    self.removePackageError = error;\n                });\n        }\n        \n        function _togglePackageDetailsOpened(bowerPackage) {\n            bowerPackage.detailsOpened = !bowerPackage.detailsOpened;\n            \n            if(bowerPackage.detailsOpened && !bowerPackage.details) {\n                loadPackageDetails(bowerPackage);\n            }\n            \n            function loadPackageDetails(bowerPackage) {\n                $http.get('packages/' + bowerPackage.name + '/details')\n                    .success(function(details) {\n                        bowerPackage.details = details;\n                    })\n                    .error(function() {\n                        bowerPackage.detailsError = true;\n                    })\n            }\n        }\n    });","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/site/directives/dialog.js":"angular.module('PrivateBower')\n    .directive('dialog', function() {\n        return {\n            restrict: 'E',\n            template: '<div class=\"dialog\" ng-show=\"isOpened\"><div class=\"dimmer\"><div class=\"inner\"><div ng-transclude=\"\"></div></div></div></div>',\n            transclude: true,\n            replace: true,\n            scope: {\n                isOpened: '=',\n                onClose: '&'\n            }\n        };\n    });","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/site/interceptors/notAuthenticatedInterceptor.js":"angular.module('PrivateBower')\n    .factory('notAuthenticatedInterceptor', function NotAuthenticatedInterceptor($q) {\n        var self = {\n            authenticationResolver: null,\n\n            responseError: _onResponseError,\n            setAuthenticationResolver: _setAuthenticationResolver\n        };\n\n        function _onResponseError(rejection) {\n            if(rejection.status === 401 && self.authenticationResolver) {\n                return self.authenticationResolver(rejection);\n            }\n\n            return $q.reject(rejection);\n        }\n\n        function _setAuthenticationResolver(authenticationResolver) {\n            self.authenticationResolver = authenticationResolver;\n        }\n\n        return self;\n    })\n    .config(function($httpProvider) {\n        $httpProvider.interceptors.push('notAuthenticatedInterceptor');\n    });","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/site/services/userContextService.js":"angular.module('PrivateBower')\n    .service('userContextService', function UserContextService($http) {\n        var self = {\n            authenticationToken: null,\n\n            setAuthenticationToken: _setAuthenticationToken\n        };\n\n        function _setAuthenticationToken(authenticationToken) {\n            self.authenticationToken = authenticationToken;\n\n            $http.defaults.headers.common['Auth-Key'] = self.authenticationToken;\n        }\n\n        return self;\n    });","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/api/infrastructure/authentication.js":"var config = require('../../infrastructure/configurationManager').config;\n\nmodule.exports = function Authentication(req, res, next) {\n    if(!config.authentication || !config.authentication.enabled) {\n        return next();\n    }\n\n    if(req.get('Auth-Key') === config.authentication.key) {\n        return next();\n    }\n\n    res.status(401);\n    res.send('Unauthorized');\n};","/home/travis/build/npmtest/node-npmtest-private-bower/node_modules/private-bower/lib/api/infrastructure/controller.js":"var Router = require('express').Router;\n\nfunction Controller(basePath) {\n    this.basePath = basePath;\n\n    this.router = Router();\n}\n\nController.prototype = {\n    get: function(path, middleware, handler) {\n        if(handler) {\n            this.router.get(path, middleware, handler);\n        }\n        else {\n            this.router.get(path, middleware);\n        }\n    },\n    post: function(path, middleware, handler) {\n        if(handler) {\n            this.router.post(path, middleware, handler);\n        }\n        else {\n            this.router.post(path, middleware);\n        }\n    },\n    put: function(path, middleware, handler) {\n        if(handler) {\n            this.router.put(path, middleware, handler);\n        }\n        else {\n            this.router.put(path, middleware);\n        }\n    },\n    delete: function(path, middleware, handler) {\n        if(handler) {\n            this.router.delete(path, middleware, handler);\n        }\n        else {\n            this.router.delete(path, middleware);\n        }\n    },\n    bind: function(app, siteBasePath) {\n        if (siteBasePath) {\n            this.basePath = siteBasePath + this.basePath;\n        }\n        app.use(this.basePath, this.router);\n    }\n};\n\nmodule.exports = Controller;"}